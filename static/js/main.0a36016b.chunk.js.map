{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","url","className","style","recipe","src","alt","map","ingredient","text","try","href","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,IAAM,sB,6MCkBvEC,EAfA,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,MAAMC,EAAsC,EAAtCA,SAASC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,IAChD,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BAAKP,GACL,yBAAKK,UAAWC,IAAMJ,MAAOM,IAAKN,EAAOO,IAAI,KAC7C,4BACKN,EAAYO,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,UAGxB,2BAAG,0CAAmBX,GACtB,uBAAGI,UAAWC,IAAMO,IAAKC,KAAMV,GAA/B,c,MC0DGW,MApEf,WAGE,IAHa,EAMkBC,mBAAS,IAN3B,mBAMNC,EANM,KAMGC,EANH,OAOeF,mBAAS,IAPxB,mBAONG,EAPM,KAOEC,EAPF,OASaJ,mBAAS,WATtB,mBASNK,EATM,KASCC,EATD,KAYbC,qBAAU,WACRC,MACA,CAACH,IAGH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAff,WAee,oBAdd,qCAaG,cACXM,EADW,gBAMIA,EAASC,OANb,OAMTC,EANS,OAOfX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MARF,2CAAH,qDAwBhB,OACE,yBAAKzB,UAAU,OAEb,0BAAM4B,SAZQ,SAAAC,GAEhBA,EAAEC,iBAEFb,EAASH,GAETC,EAAU,KAMmBf,UAAU,eACnC,2BAAOA,UAAU,aAAa+B,KAAK,OAAOC,MAAOlB,EAAQmB,SAjB1C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAiBf,4BAAQhC,UAAU,gBAAgB+B,KAAK,UAAvC,WAIF,yBAAK/B,UAAU,WACdY,EAAQP,KAAI,SAAAH,GAAM,OAEjB,kBAAC,EAAD,CACAiC,IAAKjC,EAAOA,OAAOkC,MACnBzC,MAAOO,EAAOA,OAAOkC,MACrBxC,SAAUM,EAAOA,OAAON,SACxBC,MAAOK,EAAOA,OAAOL,MACrBC,YAAaI,EAAOA,OAAOJ,YAC3BC,IAAKG,EAAOA,OAAOH,UAIpB,gCAAQ,gCAAQ,2BAAG,wDAAH,+CCxDHsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.0a36016b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__ue-8s\",\"image\":\"recipe_image__7bRnZ\",\"try\":\"recipe_try__10Gc7\"};","import React from \"react\";\r\nimport style from './recipe.module.css'\r\n\r\n//parsing data to component\r\nconst Recipe = ({title,calories,image, ingredients, url}) => {\r\n    return(\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n            <img className={style.image} src={image} alt=\"\"/>\r\n            <ol>\r\n                {ingredients.map(ingredient =>(\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p><b>Calories : </b>{calories}</p>\r\n            <a className={style.try} href={url}>Try it.!</a>\r\n        </div>\r\n    );\r\n};\r\nexport default Recipe;","import React, {useState,useEffect} from 'react';\r\nimport Recipe from \"./Recipe\";\r\nimport './App.css';\r\n//import banner from \"./images/banner.jpg\";\r\n\r\nfunction App() {\r\n\r\n  //Authentification\r\n  const APP_ID = \"21a1ba30\";\r\n  const APP_KEY = \"e63e2d27d9fd6290ad5d6cd717d72f8a\"; \r\n\r\n  const [recipes, setRecipes ] = useState([]);\r\n  const [search, setSearch] = useState(\"\"); \r\n  //Set query to stop searching when typing\r\n  const [query, setQuery] = useState('chicken');\r\n\r\n  //useEffect for to do something after render\r\n  useEffect(() => {\r\n    getRecipes();\r\n  },[query]);\r\n\r\n  //fetch the data\r\n  const getRecipes = async () => {\r\n    const response = await fetch(\r\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\n      );\r\n      //can use await keyword in async function\r\n      //await for promise to be resolve or rejected\r\n      const data = await response.json();\r\n      setRecipes(data.hits); \r\n      console.log(data.hits); \r\n  };\r\n\r\n  const updateSearch = e => {\r\n    setSearch(e.target.value);\r\n  }\r\n\r\n  const getSearch = e => {\r\n    //stop the page Refresh\r\n    e.preventDefault();\r\n    //Search data after the click search button \r\n    setQuery(search);\r\n    //Clean search box after display result\r\n    setSearch('');\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <form onSubmit={getSearch} className=\"search-form\">\r\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\r\n        <button className=\"search-button\" type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n      <div className=\"recipes\">\r\n      {recipes.map(recipe =>(\r\n        //taken data from state, pass to props\r\n        <Recipe\r\n        key={recipe.recipe.label}\r\n        title={recipe.recipe.label}\r\n        calories={recipe.recipe.calories}\r\n        image={recipe.recipe.image}\r\n        ingredients={recipe.recipe.ingredients}\r\n        url={recipe.recipe.url}\r\n        />\r\n       ))}\r\n       </div>\r\n       <footer><center><p><b>Sachith Mayantha Fernando</b> - Sabaragamuwa University of Sri Lanka</p></center></footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}