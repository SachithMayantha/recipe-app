{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","url","className","style","recipe","src","alt","map","ingredient","text","try","href","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,IAAM,sB,6MCkBvEC,EAfA,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,MAAMC,EAAsC,EAAtCA,SAASC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,IAChD,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BAAKP,GACL,yBAAKK,UAAWC,IAAMJ,MAAOM,IAAKN,EAAOO,IAAI,KAC7C,4BACKN,EAAYO,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,UAGxB,2BAAG,0CAAmBX,GACtB,uBAAGI,UAAWC,IAAMO,IAAKC,KAAMV,GAA/B,c,MC0DGW,MApEf,WAGE,IAHa,EAMkBC,mBAAS,IAN3B,mBAMNC,EANM,KAMGC,EANH,OAOeF,mBAAS,IAPxB,mBAONG,EAPM,KAOEC,EAPF,OASaJ,mBAAS,WATtB,mBASNK,EATM,KASCC,EATD,KAYbC,qBAAU,WACRC,MACA,CAACH,IAGH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAff,WAee,oBAdd,qCAaG,cACXM,EADW,gBAMIA,EAASC,OANb,OAMTC,EANS,OAOfX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MARF,2CAAH,qDAwBhB,OACE,yBAAKzB,UAAU,OAEb,0BAAM4B,SAZQ,SAAAC,GAEhBA,EAAEC,iBAEFb,EAASH,GAETC,EAAU,KAMmBf,UAAU,eACnC,2BAAOA,UAAU,aAAa+B,KAAK,OAAOC,MAAOlB,EAAQmB,SAjB1C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAiBf,4BAAQhC,UAAU,gBAAgB+B,KAAK,UAAvC,WAIF,yBAAK/B,UAAU,WACdY,EAAQP,KAAI,SAAAH,GAAM,OAEjB,kBAAC,EAAD,CACAiC,IAAKjC,EAAOA,OAAOkC,MACnBzC,MAAOO,EAAOA,OAAOkC,MACrBxC,SAAUM,EAAOA,OAAON,SACxBC,MAAOK,EAAOA,OAAOL,MACrBC,YAAaI,EAAOA,OAAOJ,YAC3BC,IAAKG,EAAOA,OAAOH,UAIpB,gCAAQ,2BAAG,oECxDEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.ba0cb211.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__ue-8s\",\"image\":\"recipe_image__7bRnZ\",\"try\":\"recipe_try__10Gc7\"};","import React from \"react\";\r\nimport style from './recipe.module.css'\r\n\r\n//parsing data to component\r\nconst Recipe = ({title,calories,image, ingredients, url}) => {\r\n    return(\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n            <img className={style.image} src={image} alt=\"\"/>\r\n            <ol>\r\n                {ingredients.map(ingredient =>(\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p><b>Calories : </b>{calories}</p>\r\n            <a className={style.try} href={url}>Try it.!</a>\r\n        </div>\r\n    );\r\n};\r\nexport default Recipe;","import React, {useState,useEffect} from 'react';\nimport Recipe from \"./Recipe\";\nimport './App.css';\n//import banner from \"./images/banner.jpg\";\n\nfunction App() {\n\n  //Authentification\n  const APP_ID = \"21a1ba30\";\n  const APP_KEY = \"e63e2d27d9fd6290ad5d6cd717d72f8a\"; \n\n  const [recipes, setRecipes ] = useState([]);\n  const [search, setSearch] = useState(\"\"); \n  //Set query to stop searching when typing\n  const [query, setQuery] = useState('chicken');\n\n  //useEffect for to do something after render\n  useEffect(() => {\n    getRecipes();\n  },[query]);\n\n  //fetch the data\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n      //can use await keyword in async function\n      //await for promise to be resolve or rejected\n      const data = await response.json();\n      setRecipes(data.hits); \n      console.log(data.hits); \n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    //stop the page Refresh\n    e.preventDefault();\n    //Search data after the click search button \n    setQuery(search);\n    //Clean search box after display result\n    setSearch('');\n  }\n\n  return (\n    <div className=\"App\">\n      \n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes\">\n      {recipes.map(recipe =>(\n        //taken data from state, pass to props\n        <Recipe\n        key={recipe.recipe.label}\n        title={recipe.recipe.label}\n        calories={recipe.recipe.calories}\n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}\n        url={recipe.recipe.url}\n        />\n       ))}\n       </div>\n       <footer><p><b>Owner : Sachith Mayantha Fernando</b></p></footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}